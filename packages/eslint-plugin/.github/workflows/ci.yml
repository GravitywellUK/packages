# Continuous Integration
name: CI

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - master

jobs:
  build-and-publish:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v1.4.3
        with:
          node-version: 12.x

      # Get yarn cache directory path
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      # Retrieve cached dependencies
      - name: Retrieve cached dependencies
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install package dependencies
      - name: Install package dependencies
        # --ignore-engines  - ignore engines check
        # --frozen-lockfile - don't generate a lockfile and fail if an update is needed
        # --ignore-scripts  - don't run lifecycle scripts
        run: yarn --ignore-engines --frozen-lockfile --ignore-scripts

      # Check linting succeeds
      - name: Check linting succeeds
        run: yarn eslint:fix

      # Ensure package build successfully
      - name: Ensure package build successfully
        run: yarn tsc:build-clean

      # Double check that no code has changed
      - name: Double check that no code has changed
        run: yarn check:clean-diff-after-install
